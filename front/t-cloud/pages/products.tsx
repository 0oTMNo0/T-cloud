import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import Footer from '../src/layout/Footer'
import Header from '../src/layout/Header'
import { FaSortAmountDownAlt } from 'react-icons/fa'
import { Badge, Dropdown } from 'flowbite-react'
import {MdCancel} from 'react-icons/md'
import CardDefault from '../src/component/CardDefulte'
import CardVip from '../src/component/CardVip'
import CardHelp from '../src/component/CardHelp'
import Cardoffer from '../src/component/CardOffer'
import { useDispatch, useSelector } from 'react-redux'
import { fetchCategories, fetchProducts } from '../src/redux/slice/productSlice'

const products = () => {



    const dispatch = useDispatch()
    const productList = useSelector((state:any) => state.product.product)
    const categoryList = useSelector((state:any) => state.product.category)
    const [allBrand, setAllBrand] = useState<string[]>([])
    const [allSize, setAllSize] = useState<string[]>([])
    




  const [sortDropdown, setSortDropdown] = useState('گرانترین')
  const [filterCategory, setFilterCategory] = useState<string[]>(['همه'])
  const [filterBrand, setFilterBrand] = useState<string[]>(['all'])
  const [filterSize, setFilterSize] = useState<string[]>(['all'])
  const [filterSex, setFilterSex] = useState<boolean | undefined>(undefined)


  useEffect(() => {
    dispatch((fetchProducts()))
    dispatch((fetchCategories()))
}, [])

useEffect(() => {
  productList?.map((product:any) => {
      if(!allBrand.includes(product.description)){
        allBrand.push(product.description)
      }
    }
    )
    productList?.map((product:any) => {
      product.options?.map((option:any) => {
        if(!allSize.includes(option)){
          allSize.push(option)
        }
      })
      })
}, [productList])

  const addFilterSize = (size: string) => {
    if (!filterSize.includes(size)) {
      setFilterSize([...filterSize, size])
      if(filterSize.includes('all')){
        setFilterSize(filterSize.filter(item => item !== 'all'))
      }
    }
  }





  
  const addFilterCategory = (category: string) => {
    if (!filterCategory.includes(category)) {
      setFilterCategory([...filterCategory, category])
      if (filterCategory.includes('همه')) {
        setFilterCategory(filterCategory.filter(item => item !== 'همه'))
      }
    }
  }

  const addFilterBrand = (brand: string) => {
    if (!filterBrand.includes(brand)) {
      setFilterBrand([...filterBrand, brand])
      if (filterBrand.includes('همه')) {
        setFilterBrand(filterBrand.filter(item => item !== 'all'))
      }
    }
    console.log(filterBrand)
  }
  
  return (
    <div>
      <Head>
        <title>T-Cloud</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <Header />
      </header>


      <main className='bg-mybackground'>
        <div className='flex justify-between p-6'>
          <div className='flex gap-1 items-center hover:border-myprimary-200 border-[1px] border-mybackground p-1 z-10'>
            <Dropdown
              label={<FaSortAmountDownAlt />}
              inline={true}
            >
              <Dropdown.Item onClick={() => {
                setSortDropdown('گرانترین')
              }}>گرانترین</Dropdown.Item>
              <Dropdown.Item onClick={() => {
                setSortDropdown('جدیدترین')
              }}>
                جدیدترین</Dropdown.Item>
              <Dropdown.Item onClick={() => {
                setSortDropdown('ارزان ترین')
              }}>
                ارزان ترین</Dropdown.Item>

            </Dropdown>
            <p>{sortDropdown}</p>
          </div>

          <div className='flex items-center gap-2'>

            <section className='hover:border-myprimary-200 border-[1px] border-mybackground p-1 z-10'>
              <Dropdown label='قیمت' inline={true}>
                <Dropdown.Item>
                  {/* <input type='number' placeholder='min' />
                  <input type='number' placeholder='max' /> */}
                </Dropdown.Item>


              </Dropdown>
            </section>

            <section className='hover:border-myprimary-200 border-[1px] border-mybackground p-1 z-10'>
              <Dropdown label='جنسیت' inline={true}>
                <Dropdown.Item onClick={() => setFilterSex(true)}>مردانه</Dropdown.Item>
                <Dropdown.Item onClick={() => setFilterSex(false)}>زنانه</Dropdown.Item>
              </Dropdown>
            </section>

            <section className='hover:border-myprimary-200 border-[1px] border-mybackground p-1 z-10'>
              <Dropdown label='سایز' inline={true}>
                {
                  allSize.map((size:string) => {
                    if(size !== 'ALL'){
                      return <Dropdown.Item onClick={() => addFilterSize(size)}>{size}</Dropdown.Item>
                    }
                  })
                }
              </Dropdown>
            </section>

              {/* filter brand by dropdown */}
            <section className='hover:border-myprimary-200 border-[1px] border-mybackground p-1 z-10'>
              <Dropdown label='برند' inline={true}>
                {
                  allBrand?.map((item:string) => {
                    return(
                      <Dropdown.Item onClick={() => addFilterBrand(item)}>{item}</Dropdown.Item>
                    )})
                }
              </Dropdown>
            </section>


            {/* filter Category by dropdown */}
            <section className='hover:border-myprimary-200 border-[1px] border-mybackground p-1 z-10'>
              <Dropdown label=' دسته بندی' inline={true}>
                {
                  categoryList?.map((category:any) => {
                      return <Dropdown.Item onClick={() => addFilterCategory(category.name)}>{category.name}</Dropdown.Item>
                  })
                }
              </Dropdown>
            </section>

          </div>
        </div>
        <div className='flex justify-end px-6 gap-1 pb-4'>
        {
          filterCategory.map(item => {
            if(item !== 'همه')
            return (<button onClick={()=>{
              setFilterCategory(filterCategory.filter(item2 => item2 !== item))
            }}><Badge color="purple"><div className='flex justify-between items-center'><MdCancel/>{item}</div></Badge></button>)
        })}
        {
          filterBrand.map(item => {
            if(item !== 'all')
            return (<button onClick={()=>{
              setFilterBrand(filterBrand.filter(item2 => item2 !== item))
            }}><Badge color="purple"><div className='flex justify-between items-center'><MdCancel/>{item}</div></Badge></button>)
        })}
        {
          filterSize.map(item => {
            if(item !== 'all')
            return (<button onClick={()=>{
              setFilterSize(filterSize.filter(item2 => item2 !== item))
            }}><Badge color="purple"><div className='flex justify-between items-center'><MdCancel/>{
              item === 's' ? 'S' :
              item === 'm' ? 'M' :
              item === 'l' ? 'L' :
              item === 'xl' ? 'XL' :
              item === 'xxl' ? 'XXL' :
              item
            }</div></Badge></button>)
        })}
        {
          filterSex !== undefined ?
          <button onClick={()=>{
            setFilterSex(undefined)
          }
          }><Badge color="purple"><div className='flex justify-between items-center'><MdCancel/>{filterSex ? 'زنانه' : 'مردانه'}</div></Badge></button>
          : null
        }
        
        </div>

        <div className='grid grid-cols-3 md:grid-cols-4'>

          {
            productList?.map((item:any) => {
              return (
                <div className='flex justify-center items-center mb-4 z-0' dir='rtl'>
                  {
                    item.slug === 'vip' ?
                    (
                        <CardVip
                    brand={item.description}
                    label={item.name}
                    price={item.price}
                    size={(item.options.filter((item2:string) => item2 !== 'ALL'))}
                    url={item.main_image}
                    rate={4}
                    />
                    ) : item.slug === 'help' ?
                    (
                      <CardHelp
                    brand={item.description}
                    label={item.name}
                    price={item.price}
                    size={(item.options.filter((item2:string) => item2 !== 'ALL'))}
                    url={item.main_image}
                    rate={4}
                    />
                    ) : item.slug === 'off' ?
                    (
                      <Cardoffer
                      oldPrice={item.price}
                        brand={item.description}
                        label={item.name}
                        price={item.final_price}
                        size={(item.options.filter((item2:string) => item2 !== 'ALL'))}
                        url={item.main_image}
                        rate={4}
                        />
                    ) : (
                      <CardDefault
                    brand={item.description}
                    label={item.name}
                    price={item.price}
                    size={(item.options.filter((item2:any) => item2 !== 'ALL'))}
                    url={item.main_image}
                    rate={4}
                    />
                    )
                  }
 
                </div>
              )})
          }
          
        </div>

      </main>


      <footer>
        <Footer />
      </footer>
    </div>
  )
}

export default products
